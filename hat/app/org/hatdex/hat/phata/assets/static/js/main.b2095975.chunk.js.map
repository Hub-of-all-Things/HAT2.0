{"version":3,"sources":["redux/actions/rootActions.ts","services/BackendService.ts","features/hmi/hmiSlice.ts","features/authentication/authenticationSlice.ts","app.config.ts","environment.ts","features/messages/messagesSlice.ts","features/hat-setup-login/hatSetupLoginSlice.ts","features/applications/applicationsSlice.ts","components/LoadingSpinner/LoadingSpinner.tsx","hooks/useQuery.ts","features/hat-login/hatLoginSlice.ts","services/HatClientService.ts","serviceWorker.ts","app/PrivateRoute.tsx","app/AppRouter.tsx","features/language/languageSlice.ts","features/hat-claim/redux/reducers/hatClaimReducer.ts","features/hat-claim/redux/reducers/hatClaimPasswordReducer.ts","features/hat-claim/redux/reducers/hatClaimCombinedReducer.ts","features/hat-claim/redux/reducers/hatClaimCurrentStepReducer.ts","features/hat-claim/redux/reducers/hatClaimErrorReducer.ts","app/store.ts","app/Root.tsx","app/LanguageParamHandler.tsx","app/App.tsx","index.tsx"],"names":["ReduxActionTypes","ReduxTestingActionTypes","get","path","a","args","method","http","Request","post","body","JSON","stringify","request","Promise","resolve","reject","response","fetch","then","res","json","ok","parsedBody","catch","err","slice","createSlice","name","initialState","parentApp","dependencyApps","reducers","state","action","payload","push","actions","setParentApp","app","dispatch","setDependencyApps","selectParentApp","hmi","selectDependencyApps","AuthState","config","version","environment","appName","tokenApp","tokenName","tokenExpiryTime","supportedDomains","supportedPorts","native","protocol","links","bestPractices","termsOfService","privacyPolicy","isAuthenticated","authState","LOGIN_REQUEST","rememberMe","authenticateWithToken","token","loginAuthState","loginWithToken","tokenIsValid","HatTokenValidation","decodeToken","window","sessionStorage","setItem","LOGIN_FAILED","e","decodedToken","expiryDate","toDate","issuedDate","scopeIsValid","tokenDomain","indexOf","domainIsValid","portIsValid","RegExp","join","test","notExpired","isFuture","addDays","selectIsAuthenticated","authentication","production","process","sandbox","messages","Object","assign","selectMessages","fetchMessages","msgs","jsonMenu","default","errorMessage","redirectError","error","errorReason","setRedirectError","selectRedirectError","hatSetupLogin","onTermsAgreed","parentAppId","setupApplication","onTermsDeclined","hatSvc","HatClientService","getInstance","sendReport","logout","console","log","applications","expirationTime","apps","setApps","selectApplications","getApplications","getApplicationsHmi","getApplicationHmi","LoadingSpinner","props","className","loadingText","useQuery","URLSearchParams","useLocation","search","setErrorMessage","msg","selectErrorMessage","hatLogin","pathPrefix","hat","secure","this","location","HatClient","apiVersion","auth","signOut","getAllDefault","appId","getById","applicationId","getToken","hatdomain","getHatDomain","headers","isTokenExpired","actionCode","message","instance","Boolean","hostname","match","PrivateRoute","children","rest","useSelector","query","useDispatch","useEffect","Cookies","getItem","tokenParam","render","to","pathname","from","delay","DelayedRedirect","timeout","timeToRedirect","setTimeout","setState","clearTimeout","React","Component","HatClaim","lazy","Login","HatLogin","HatSetupLogin","PasswordRecover","AppRouter","fallback","component","exact","hash","replace","language","initHatClaim","password","email","hatName","hatCluster","termsAgreed","optins","passwordConfirm","passwordStrength","score","passwordMatch","hatClaimCombinedReducer","combineReducers","hatClaim","type","EDIT_HAT_CLAIM","value","currentStep","EDIT_CURRENT_STEP","step","EDIT_HAT_PASSWORD","errorMsg","EDIT_HAT_CLAIM_ERROR_MSG","store","configureStore","reducer","applicationsSlice","authenticationSlice","languageSlice","messagesSlice","hmiSlice","hatLoginSlice","hatSetupLoginSlice","Root","LanguageParamHandler","lang","App","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b2095975.chunk.js","sourcesContent":["export enum ReduxActionTypes {\n  EDIT_HAT_CLAIM = 'EDIT_HAT_CLAIM',\n  EDIT_HAT_PASSWORD = 'EDIT_HAT_PASSWORD',\n  EDIT_CURRENT_STEP = 'EDIT_CURRENT_STEP',\n  EDIT_HAT_CLAIM_ERROR_MSG = 'EDIT_HAT_CLAIM_ERROR_MSG',\n}\n\nexport enum ReduxTestingActionTypes {\n  EDIT_HAT_CLAIM_TEST = 'EDIT_HAT_CLAIM_TEST',\n  EDIT_HAT_PASSWORD_TEST = 'EDIT_HAT_PASSWORD_TEST',\n  EDIT_CURRENT_STEP_TEST = 'EDIT_CURRENT_STEP_TEST',\n  EDIT_HAT_CLAIM_ERROR_MSG_TEST = 'EDIT_HAT_CLAIM_ERROR_MSG_TEST',\n}\n\nexport interface ReduxBaseAction {\n  type: ReduxActionTypes | ReduxTestingActionTypes;\n}\n","export const get = async <T>(path: string, args: RequestInit = { method: 'get' }): Promise<IHttpResponse<T>> => {\n  return await http<T>(new Request(path, args));\n};\n\nexport const post = async <T>(\n  path: string,\n  body: any,\n  args: RequestInit = { method: 'post', body: JSON.stringify(body) }\n): Promise<IHttpResponse<T>> => {\n  return await http<T>(new Request(path, args));\n};\n\nexport const put = async <T>(\n  path: string,\n  body: any,\n  args: RequestInit = { method: 'put', body: JSON.stringify(body) }\n): Promise<IHttpResponse<T>> => {\n  return await http<T>(new Request(path, args));\n};\n\nexport const http = <T>(request: RequestInfo): Promise<IHttpResponse<T>> => {\n  return new Promise((resolve, reject) => {\n    let response: IHttpResponse<T>;\n\n    fetch(request)\n      .then(res => {\n        response = res;\n        return res.json();\n      })\n      .then(body => {\n        if (response.ok) {\n          response.parsedBody = body;\n          resolve(response);\n        } else {\n          reject(body);\n        }\n      })\n      .catch(err => {\n        reject(err);\n      });\n  });\n};\n\nexport interface IHttpResponse<T> extends Response {\n  parsedBody?: T;\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\nimport { HatApplication } from '@dataswift/hat-js/lib/interfaces/hat-application.interface';\nimport { HatClientService } from '../../services/HatClientService';\n\ntype ApplicationsState = {\n    parentApp: HatApplication | null;\n    dependencyApps: HatApplication[];\n};\n\nexport const initialState: ApplicationsState = {\n  parentApp: null,\n  dependencyApps: [],\n};\n\nexport const slice = createSlice({\n  name: 'hmi',\n  initialState,\n  reducers: {\n    parentApp: (state, action: PayloadAction<HatApplication>) => {\n      state.parentApp = action.payload;\n    },\n    dependencyApps: (state, action: PayloadAction<Array<HatApplication>>) => {\n      state.dependencyApps.push(...action.payload);\n    },\n  },\n});\n\nexport const { parentApp, dependencyApps } = slice.actions;\n\nexport const setParentApp = (app: HatApplication): AppThunk => dispatch => {\n  dispatch(parentApp(app));\n};\n\nexport const setDependencyApps = (app: Array<HatApplication>): AppThunk => dispatch => {\n  dispatch(dependencyApps(app));\n};\n\nexport const selectParentApp = (state: RootState) => state.hmi.parentApp;\nexport const selectDependencyApps = (state: RootState) => state.hmi.dependencyApps;\n\n\nexport const setupApplication = (parentAppId: string): AppThunk => async dispatch => {\n  try {\n    const app = await HatClientService.getInstance().setupApplication(parentAppId);\n\n    if (app?.parsedBody) {\n      return dispatch(setParentApp(app.parsedBody));\n    }\n  } catch (e) {\n    // todo error handling\n    console.log(e);\n  }\n};\n\nexport default slice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\nimport { HatTokenValidation, JWTDecoded } from '@dataswift/hat-js/lib/utils/HatTokenValidation';\nimport { config } from '../../app.config';\nimport { isFuture, toDate, addDays } from 'date-fns';\n\nexport enum AuthState {\n  LOGIN_REQUEST = 'login_request',\n  LOGIN_FAILED = 'login_failed',\n}\n\ntype AuthenticationState = {\n  isAuthenticated: boolean;\n  authState: AuthState;\n  rememberMe: boolean;\n  token?: string | null;\n};\n\nexport const initialState: AuthenticationState = {\n  isAuthenticated: false,\n  authState: AuthState.LOGIN_REQUEST,\n  rememberMe: false,\n};\n\nexport const slice = createSlice({\n  name: 'authentication',\n  initialState,\n  reducers: {\n    authenticateWithToken: (state, action: PayloadAction<string>) => {\n      state.token = action.payload;\n      state.isAuthenticated = true;\n    },\n    loginAuthState: (state, actions: PayloadAction<AuthState>) => {\n      state.authState = actions.payload;\n    },\n  },\n});\n\nexport const { authenticateWithToken, loginAuthState } = slice.actions;\n\nexport const loginWithToken = (token: string): AppThunk => dispatch => {\n  try {\n    if (tokenIsValid(HatTokenValidation.decodeToken(token))) {\n      dispatch(authenticateWithToken(token));\n      window.sessionStorage.setItem('token', token);\n    } else {\n      dispatch(loginAuthState(AuthState.LOGIN_FAILED));\n    }\n  } catch (e) {\n    dispatch(loginAuthState(AuthState.LOGIN_FAILED));\n  }\n};\n\nconst tokenIsValid = (decodedToken: JWTDecoded): boolean => {\n  const expiryDate = toDate(decodedToken['exp'] * 1000);\n  const issuedDate = toDate(decodedToken['iat'] * 1000);\n\n  // TODO remove the ts-ignore when hat-js will be updated\n  // @ts-ignore\n  const scopeIsValid = decodedToken['application'] === config.tokenApp || decodedToken['accessScope'] === 'owner';\n  const tokenDomain = decodedToken['iss']?.slice(decodedToken['iss'].indexOf('.')) || '';\n  const domainIsValid = config.supportedDomains.indexOf(tokenDomain) > -1;\n  const portIsValid = new RegExp('^[w.]+:' + config.supportedPorts.join('|') + '$', 'gi').test(tokenDomain);\n  const notExpired = isFuture(expiryDate) && isFuture(addDays(issuedDate, config.tokenExpiryTime));\n\n  return scopeIsValid && (domainIsValid || portIsValid) && notExpired;\n};\n\nexport const selectIsAuthenticated = (state: RootState) => state.authentication.isAuthenticated;\nexport const selectAuthToken = (state: RootState) => state.authentication.token;\n\nexport default slice.reducer;\n","import { environment } from './environment';\n\nexport const config = {\n  version: '4.0.0.0',\n  name: environment.appName,\n  tokenApp: environment.tokenName,\n  tokenExpiryTime: 3,\n  supportedDomains: ['.hubofallthings.net', '.hubat.net', '.hat.direct', '.dataswift.me', '.dataswift.dev'],\n  supportedPorts: [3000, 9000, 9001],\n  native: environment.native,\n  protocol: environment.protocol,\n  links: {\n    bestPractices: 'https://docs.dataswift.io/technology/why/security-best-practice',\n    termsOfService: 'https://cdn.dataswift.io/legal/hat-owner-terms-of-service.pdf',\n    privacyPolicy: 'https://cdn.dataswift.io/legal/dataswift-privacy-policy.pdf',\n  },\n};\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: process.env.REACT_APP_PRODUCTION === 'true',\n  sandbox: process.env.REACT_APP_SANDBOX === 'true',\n  native: true,\n  protocol: 'https:',\n  appName: process.env.REACT_APP_APP_NAME,\n  tokenName: process.env.REACT_APP_TOKEN_NAME,\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\n\nexport interface Messages {\n  [index: string]: string;\n}\n\nexport const initialState: Messages = {};\n\nexport const slice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    messages: (state, action: PayloadAction<Messages>) => {\n      Object.assign(state, action.payload);\n    },\n  },\n});\n\nexport const { messages } = slice.actions;\n\nexport const setMessages = (msgs: Messages): AppThunk => dispatch => {\n  dispatch(messages(msgs));\n};\n\nexport const selectMessages = (state: RootState) => state.messages;\n\nexport const fetchMessages = (): AppThunk => async dispatch => {\n  import(\n    /* webpackChunkName: \"en_lang\" */\n    '../../translations/en.json'\n  ).then(({ default: jsonMenu }) => {\n    return dispatch(setMessages(jsonMenu));\n  });\n};\n\nexport default slice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\nimport { HatClientService } from '../../services/HatClientService';\nimport { setParentApp } from \"../hmi/hmiSlice\";\n\ntype ApplicationsState = {\n    errorMessage?: string;\n    redirectError: {\n        error: string;\n        errorReason: string;\n    }\n};\n\nexport const initialState: ApplicationsState = {\n  errorMessage: '',\n  redirectError: {\n    error: '',\n    errorReason: ''\n  }\n};\n\nexport const slice = createSlice({\n  name: 'hatSetupLogin',\n  initialState,\n  reducers: {\n    errorMessage: (state, action: PayloadAction<string>) => {\n      state.errorMessage = action.payload;\n    },\n    redirectError: (state, action: PayloadAction<{\n      error: string;\n      errorReason: string;\n    }>) => {\n      state.redirectError.error = action.payload.error;\n      state.redirectError.errorReason = action.payload.errorReason;\n    },\n  },\n});\n\nexport const { errorMessage, redirectError } = slice.actions;\n\nexport const setErrorMessage = (msg: string): AppThunk => dispatch => {\n  dispatch(errorMessage(msg));\n};\n\nexport const setRedirectError = (error: string, errorReason: string): AppThunk => dispatch => {\n  dispatch(redirectError({ error, errorReason }));\n};\n\nexport const selectErrorMessage = (state: RootState) => state.hatSetupLogin.errorMessage;\nexport const selectRedirectError = (state: RootState) => state.hatSetupLogin.redirectError;\n\nexport const onTermsAgreed = (parentAppId: string): AppThunk => async dispatch => {\n  return dispatch(setupApplication(parentAppId));\n};\n\nexport const onTermsDeclined = (): AppThunk => async dispatch => {\n  const hatSvc = HatClientService.getInstance();\n\n  try {\n    await hatSvc.sendReport('hmi_declined');\n  } catch (e) {\n    return `error ${ e }`;\n  } finally {\n    hatSvc.logout();\n    dispatch(setRedirectError('access_denied', 'user_cancelled'));\n  }\n};\n\nexport const setupApplication = (parentAppId: string): AppThunk => async dispatch => {\n  try {\n    const app = await HatClientService.getInstance().setupApplication(parentAppId);\n\n    if (app?.parsedBody) {\n      return dispatch(setParentApp(app.parsedBody));\n    }\n  } catch (e) {\n    // todo error handling\n    console.log(e);\n  }\n};\n\nexport default slice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\nimport { get } from '../../services/BackendService';\nimport { HatApplication } from '@dataswift/hat-js/lib/interfaces/hat-application.interface';\nimport { HatClientService } from \"../../services/HatClientService\";\n\ntype ApplicationsState = {\n  applications: HatApplication[];\n  updatedAt?: string;\n  expirationTime: number;\n};\n\nexport const initialState: ApplicationsState = {\n  applications: [],\n  expirationTime: 20,\n};\n\nexport const slice = createSlice({\n  name: 'applications',\n  initialState,\n  reducers: {\n    apps: (state, action: PayloadAction<Array<HatApplication>>) => {\n      state.applications.push(...action.payload);\n    },\n  },\n});\n\nexport const { apps } = slice.actions;\n\nexport const setApps = (app: Array<HatApplication>): AppThunk => dispatch => {\n  dispatch(apps(app));\n};\n\nexport const selectApplications = (state: RootState) => state.applications.applications;\n\nexport const getApplications = (): AppThunk => async dispatch => {\n  let url = `/api/applications`;\n\n  const app = await get<Array<HatApplication>>(url);\n  if (app.parsedBody) {\n    return dispatch(setApps(app.parsedBody));\n  }\n};\n\nexport const getApplicationsHmi = (parentAppId: string): AppThunk => async dispatch => {\n  try {\n    const apps = await HatClientService.getInstance().getApplicationHmi(parentAppId);\n\n    if (apps?.parsedBody) {\n      dispatch(setApps(apps.parsedBody));\n    }\n  } catch (e) {\n    // dispatch(setErrorMessage('ERROR: Something went wrong. Please contact the app developer and let them know.'));\n  }\n};\n\nexport default slice.reducer;\n","import React from 'react';\nimport './LoadingSpinner.scss';\n\ntype Props = {\n    loadingText: string\n};\n\nexport const LoadingSpinner: React.FC<Props> = props => {\n  return (\n    <div className=\"loading\">\n      <div className=\"loading-spinner\"/>\n      <div className=\"loading-text\">{props.loadingText}</div>\n    </div>\n  );\n};\n","import { useLocation } from 'react-router';\n\nexport function useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\nimport { HatClientService } from '../../services/HatClientService';\nimport { setParentApp } from \"../hmi/hmiSlice\";\n\ntype ApplicationsState = {\n  errorMessage?: string;\n};\n\nexport const initialState: ApplicationsState = {\n  errorMessage: '',\n};\n\nexport const slice = createSlice({\n  name: 'hatLogin',\n  initialState,\n  reducers: {\n    errorMessage: (state, action: PayloadAction<string>) => {\n      state.errorMessage = action.payload;\n    },\n  },\n});\n\nexport const { errorMessage } = slice.actions;\n\nexport const setErrorMessage = (msg: string): AppThunk => dispatch => {\n  dispatch(errorMessage(msg));\n};\n\nexport const selectErrorMessage = (state: RootState) => state.hatLogin.errorMessage;\n\nexport const setupApplication = (parentAppId: string): AppThunk => async dispatch => {\n  try {\n    const app = await HatClientService.getInstance().setupApplication(parentAppId);\n\n    if (app?.parsedBody) {\n      return dispatch(setParentApp(app.parsedBody));\n    }\n  } catch (e) {\n    // todo error handling\n    console.log(e);\n  }\n};\n\nexport default slice.reducer;\n","import { HatClient } from '@dataswift/hat-js';\nimport { get, post } from './BackendService';\nimport { HatApplication } from '@dataswift/hat-js/lib/interfaces/hat-application.interface';\nimport { HatTokenValidation } from \"@dataswift/hat-js/lib/utils/HatTokenValidation\";\n\nexport class HatClientService {\n  private readonly pathPrefix = '/api/v2.6';\n  private static instance: HatClientService;\n  private hat: HatClient;\n  private secure = false;\n\n  private constructor(token?: string) {\n    if (token) {\n      const decodedToken = HatTokenValidation.decodeToken(token);\n      this.secure = window.location.protocol === 'https:' || decodedToken['iss']?.indexOf(':') === -1;\n      this.hat = new HatClient({ token: token || '', secure: this.secure, apiVersion: 'v2.6' });\n    } else {\n      this.hat = new HatClient({ apiVersion: 'v2.6' });\n    }\n  }\n\n  public static getInstance(token?: string): HatClientService {\n    if (!HatClientService.instance) {\n      HatClientService.instance = new HatClientService(token);\n    }\n\n    if (token) {\n      HatClientService.instance = new HatClientService(token);\n    }\n\n    return HatClientService.instance;\n  }\n\n  public logout() {\n    return this.hat.auth().signOut();\n  }\n\n  public async getApplications() {\n    return await this.hat.applications().getAllDefault();\n  }\n\n  public async getApplicationById(appId: string) {\n    return await this.hat.applications().getById(appId);\n  }\n\n  public async setupApplication(applicationId: string) {\n    const token = this.hat.auth().getToken();\n    const hatdomain = this.hat.auth().getHatDomain();\n\n    if (!token) return;\n\n    const path = `${ hatdomain }${ this.pathPrefix }/applications/${ applicationId }/setup`;\n\n    return get<HatApplication>(path, { method: 'get', headers: { 'x-auth-token': token } });\n  }\n\n  public isTokenExpired(token: string) {\n    return this.hat.auth().isTokenExpired(token);\n  }\n\n  public async getApplicationHmi(applicationId: string) {\n    const token = this.hat.auth().getToken();\n    const hatdomain = this.hat.auth().getHatDomain();\n\n    if (!token) return;\n\n    const path = `${ hatdomain }${ this.pathPrefix }/applications/hmi?applicationId=${ applicationId }`;\n\n    return get<HatApplication[]>(path, { method: 'get', headers: { 'x-auth-token': token } });\n  }\n\n  public async sendReport(actionCode: string, message?: string) {\n    const token = this.hat.auth().getToken();\n    const hatdomain = this.hat.auth().getHatDomain();\n\n    if (!token) return;\n\n    const path = `${ hatdomain }${ this.pathPrefix }/report-frontend-action`;\n    const body = { actionCode: actionCode, message: message };\n\n    return post<HatApplication[]>(\n      path,\n      {},\n      {\n        method: 'post',\n        body: JSON.stringify(body),\n        headers: { 'x-auth-token': token, 'content-type': 'application/json' },\n      }\n    );\n  }\n\n  public async appLogin(applicationId: string) {\n    const token = this.hat.auth().getToken();\n    const hatdomain = this.hat.auth().getHatDomain();\n\n    if (!token) return;\n\n    const path = `${ hatdomain }${ this.pathPrefix }/applications/${ applicationId }/access-token`;\n\n    return get<{ accessToken: string }>(path, { method: 'get', headers: { 'x-auth-token': token } });\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${ process.env.PUBLIC_URL }/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { useQuery } from '../hooks/useQuery';\nimport { Redirect, RedirectProps, Route } from 'react-router';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loginWithToken, selectIsAuthenticated } from '../features/authentication/authenticationSlice';\nimport Cookies from 'js-cookie';\nimport { HatClientService } from '../services/HatClientService';\n\ninterface OwnProps {\n  children: React.ReactNode;\n  path?: string;\n  exact?: boolean;\n}\n\nexport function PrivateRoute({ children, ...rest }: OwnProps) {\n  const isAuthenticated = useSelector(selectIsAuthenticated);\n  const query = useQuery();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const token = Cookies.get('token') || sessionStorage.getItem('token');\n    const tokenParam = query.get('token');\n    const hatSvc = HatClientService.getInstance();\n\n    if (tokenParam && !hatSvc.isTokenExpired(tokenParam)) {\n      dispatch(loginWithToken(tokenParam));\n      HatClientService.getInstance(tokenParam);\n    } else if (token && !hatSvc.isTokenExpired(token)) {\n      dispatch(loginWithToken(token));\n      HatClientService.getInstance(token);\n    }\n  }, [query, dispatch]);\n\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        isAuthenticated ? (\n          children\n        ) : (\n          <DelayedRedirect\n            to={{\n              pathname: '/user/login',\n              state: { from: location },\n            }}\n            delay={100}\n          />\n        )\n      }\n    />\n  );\n}\n\ninterface DelayedProps {\n  delay: number;\n}\n\ninterface DelayedState {\n  timeToRedirect: boolean;\n}\n\nclass DelayedRedirect extends React.Component<RedirectProps & DelayedProps, DelayedState> {\n  timeout: any = null;\n\n  state: DelayedState = {\n    timeToRedirect: false,\n  };\n\n  componentDidMount() {\n    this.timeout = setTimeout(() => {\n      this.setState({\n        timeToRedirect: true,\n      });\n    }, this.props.delay);\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  }\n\n  render() {\n    const { ...props } = this.props;\n    const { timeToRedirect } = this.state;\n\n    if (timeToRedirect) {\n      return <Redirect {...props} />;\n    }\n\n    return null;\n  }\n}\n","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\nimport { PrivateRoute } from './PrivateRoute';\nimport { LoadingSpinner } from \"../components/LoadingSpinner/LoadingSpinner\";\nconst HatClaim = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"hat_claim\" */\n    '../features/hat-claim/HatClaim'\n  )\n);\nconst Login = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"user_login\" */\n    '../components/user/Login'\n  )\n);\nconst HatLogin = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"hat_login\" */\n    '../features/hat-login/HatLogin'\n  )\n);\n\nconst HatSetupLogin = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"hat_setup_login\" */\n    '../features/hat-setup-login/HatSetupLogin'\n  )\n);\nconst PasswordRecover = React.lazy(() =>\n  import(\n    /* webpackChunkName: \"password_recover\" */\n    '../components/user/PasswordRecover'\n  )\n);\n\nconst AppRouter = () => (\n  <Router>\n    <Suspense fallback={<LoadingSpinner loadingText={'Loading'}/>}>\n      <Switch>\n        <Route path=\"/hat/claim/:claimToken\" component={HatClaim} />\n        <Route path=\"/user/login/\" component={Login} />\n        <Route path=\"/user/password/recover\" component={PasswordRecover} />\n\n        <PrivateRoute path={'/hatlogin'}>\n          <HatLogin />\n        </PrivateRoute>\n\n        <PrivateRoute path={'/hat-setup-login'}>\n          <HatSetupLogin />\n        </PrivateRoute>\n\n        <Route exact path=\"/\" render={({ location }) => <Redirect to={location.hash.replace('#', '')} />} />\n      </Switch>\n    </Suspense>\n  </Router>\n);\nexport default AppRouter;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { AppThunk, RootState } from '../../app/store';\n\ntype LanguageState = {\n  language: string;\n};\n\nexport const initialState: LanguageState = {\n  language: 'en',\n};\n\nexport const slice = createSlice({\n  name: 'language',\n  initialState,\n  reducers: {\n    language: (state, action: PayloadAction<string>) => {\n      state.language = action.payload;\n    },\n  },\n});\n\nexport const { language } = slice.actions;\n\nexport const setLanguage = (lang: string): AppThunk => dispatch => {\n  dispatch(language(lang));\n};\n\nexport const selectLanguage = (state: RootState) => state.language.language;\n\nexport default slice.reducer;\n","import { HatClaim } from '../../hat-claim.interface';\nimport { ReduxEditHatClaimAction } from '../actions/hatClaimActions';\nimport { ReduxActionTypes } from '../../../../redux/actions/rootActions';\n\nconst initHatClaim: HatClaim = {\n  password: '',\n  email: '',\n  hatName: '',\n  hatCluster: '',\n  termsAgreed: false,\n  optins: false,\n};\n\ntype UserReducerActionsType = ReduxEditHatClaimAction;\n\nexport default function(state: HatClaim = initHatClaim, action: UserReducerActionsType) {\n  if (action.type === ReduxActionTypes.EDIT_HAT_CLAIM) {\n    return {\n      ...state,\n      [action.name]: action.value,\n    };\n  } else {\n    return state;\n  }\n}\n","import { ReduxEditPasswordHatClaimAction } from '../actions/hatClaimActions';\nimport { ReduxActionTypes } from '../../../../redux/actions/rootActions';\n\nexport interface ReduxHatClaimPasswordState {\n  password: string;\n  passwordConfirm: string;\n  passwordStrength: { score: number };\n  passwordMatch: boolean;\n}\n\nconst initialState: ReduxHatClaimPasswordState = {\n  password: '',\n  passwordConfirm: '',\n  passwordStrength: { score: 0 },\n  passwordMatch: false,\n};\n\ntype HatClaimPasswordReducerActionsType = ReduxEditPasswordHatClaimAction;\n\nexport default function(state: ReduxHatClaimPasswordState = initialState, action: HatClaimPasswordReducerActionsType) {\n  if (action.type === ReduxActionTypes.EDIT_HAT_PASSWORD) {\n    return {\n      ...state,\n      [action.name]: action.value,\n    };\n  } else {\n    return state;\n  }\n}\n","import hatClaimReducer from './hatClaimReducer';\nimport { combineReducers } from 'redux';\nimport hatClaimPasswordReducer, { ReduxHatClaimPasswordState } from './hatClaimPasswordReducer';\nimport hatClaimCurrentStepReducer from './hatClaimCurrentStepReducer';\nimport { HatClaim } from '../../hat-claim.interface';\nimport hatClaimErrorReducer from './hatClaimErrorReducer';\n\ninterface RootReducerInterface {\n  hatClaim: HatClaim;\n  currentStep: number;\n  password: ReduxHatClaimPasswordState;\n  errorMsg: string;\n}\n\nconst hatClaimCombinedReducer = combineReducers<RootReducerInterface>({\n  hatClaim: hatClaimReducer,\n  currentStep: hatClaimCurrentStepReducer,\n  password: hatClaimPasswordReducer,\n  errorMsg: hatClaimErrorReducer,\n});\n\nexport type HatClaimState = ReturnType<typeof hatClaimCombinedReducer>;\n\nexport default hatClaimCombinedReducer;\n","import { ReduxEdiCurrentStepHatClaimAction } from '../actions/hatClaimActions';\nimport { ReduxActionTypes } from '../../../../redux/actions/rootActions';\n\ntype UserReducerActionsType = ReduxEdiCurrentStepHatClaimAction;\n\nexport default function(state: number = 0, action: UserReducerActionsType) {\n  if (action.type === ReduxActionTypes.EDIT_CURRENT_STEP) {\n    return action.step;\n  } else {\n    return state;\n  }\n}\n","import { ReduxEditErrorMsgHatClaimAction } from '../actions/hatClaimActions';\nimport { ReduxActionTypes } from '../../../../redux/actions/rootActions';\n\ntype UserReducerActionsType = ReduxEditErrorMsgHatClaimAction;\n\nexport default function(state: string = '', action: UserReducerActionsType) {\n  if (action.type === ReduxActionTypes.EDIT_HAT_CLAIM_ERROR_MSG) {\n    return action.message;\n  } else {\n    return state;\n  }\n}\n","import { Action, configureStore, ThunkAction } from '@reduxjs/toolkit';\nimport applicationsSlice from '../features/applications/applicationsSlice';\nimport authenticationSlice from '../features/authentication/authenticationSlice';\nimport languageSlice from '../features/language/languageSlice';\nimport messagesSlice from '../features/messages/messagesSlice';\nimport hatLoginSlice from '../features/hat-login/hatLoginSlice';\nimport hatSetupLoginSlice from \"../features/hat-setup-login/hatSetupLoginSlice\";\nimport hmiSlice from \"../features/hmi/hmiSlice\";\nimport hatClaimCombinedReducer from \"../features/hat-claim/redux/reducers/hatClaimCombinedReducer\";\n\nexport const store = configureStore({\n  reducer: {\n    applications: applicationsSlice,\n    authentication: authenticationSlice,\n    language: languageSlice,\n    messages: messagesSlice,\n    hmi: hmiSlice,\n    hatLogin: hatLoginSlice,\n    hatSetupLogin: hatSetupLoginSlice,\n    hatClaim: hatClaimCombinedReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst Root: React.FC<Props> = props => <Provider store={store}>{props.children}</Provider>;\n\nexport default Root;\n","import React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { setLanguage } from '../features/language/languageSlice';\nimport { fetchMessages } from '../features/messages/messagesSlice';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const LanguageParamHandler: React.FC<Props> = props => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(setLanguage('en'));\n    dispatch(fetchMessages());\n  }, [dispatch]);\n\n  return <>{props.children}</>;\n};\n","import React from 'react';\nimport AppRouter from './AppRouter';\nimport Root from './Root';\nimport { LanguageParamHandler } from './LanguageParamHandler';\n\nconst App = () => (\n  <Root>\n    <LanguageParamHandler>\n      <AppRouter />\n    </LanguageParamHandler>\n  </Root>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/styles/main.scss';\nimport * as serviceWorker from './serviceWorker';\nimport App from './app/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}