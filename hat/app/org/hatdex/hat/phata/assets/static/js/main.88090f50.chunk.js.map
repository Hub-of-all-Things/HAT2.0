{"version":3,"sources":["components/hat-claim/redux/reducers/hatClaimReducer.ts","components/hat-claim/redux/reducers/hatClaimPasswordReducer.ts","components/hat-claim/redux/reducers/hatClaimCombinedReducer.ts","components/hat-claim/redux/reducers/hatClaimCurrentStepReducer.ts","components/hat-claim/redux/reducers/hatClaimErrorReducer.ts","redux/reducer/rootReducer.ts","components/App/Root.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx","redux/actions/rootActions.ts"],"names":["initHatClaim","password","email","hatName","hatCluster","termsAgreed","optins","initialState","passwordConfirm","passwordStrength","score","passwordMatch","hatClaimCombinedReducer","combineReducers","hatClaim","state","action","type","ReduxActionTypes","EDIT_HAT_CLAIM","name","value","currentStep","EDIT_CURRENT_STEP","step","EDIT_HAT_PASSWORD","errorMsg","EDIT_HAT_CLAIM_ERROR_MSG","message","rootReducer","store","createStore","applyMiddleware","thunk","Root","props","children","HatClaim","React","lazy","App","fallback","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ReduxTestingActionTypes"],"mappings":"k2BAIA,IAAMA,EAAyB,CAC3BC,SAAU,GACVC,MAAO,GACPC,QAAS,GACTC,WAAY,GACZC,aAAa,EACbC,QAAQ,G,yjBCAZ,IAAMC,EAA2C,CAC7CN,SAAU,GACVO,gBAAiB,GACjBC,iBAAkB,CAAEC,MAAO,GAC3BC,eAAe,GCSJC,EATiBC,YAAsC,CAClEC,SFAW,WAGZ,IAFCC,EAEF,uDAFoBf,EAClBgB,EACF,uCACE,OAAIA,EAAOC,OAASC,IAAiBC,eAC1B,EAAP,GACOJ,EADP,eACeC,EAAOI,KAAOJ,EAAOK,QAG7BN,GERXO,YCXW,WAGZ,IAFCP,EAEF,uDAFkB,EAChBC,EACF,uCACE,OAAIA,EAAOC,OAASC,IAAiBK,kBAC1BP,EAAOQ,KAEPT,GDKXd,SDEW,WAGZ,IAFCc,EAEF,uDAFsCR,EACpCS,EACF,uCACE,OAAIA,EAAOC,OAASC,IAAiBO,kBAC1B,KACAV,EADP,eAEKC,EAAOI,KAAOJ,EAAOK,QAGnBN,GCXXW,SEbW,WAGZ,IAFCX,EAEF,uDAFkB,GAChBC,EACF,uCACE,OAAIA,EAAOC,OAASC,IAAiBS,yBAC1BX,EAAOY,QAEPb,KCCAc,EANKhB,YAAsC,CACtDC,SAAUF,I,QCFRkB,EAAQC,YAAYF,EAAaG,YAAgBC,MAWxCC,EALe,SAAAC,GAAK,OAC/B,kBAAC,IAAD,CAAUL,MAAOA,GACZK,EAAMC,WCXTC,EAAWC,IAAMC,MAAK,kBAAM,sDAanBC,EAXH,kBACR,kBAAC,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,SAAU,4CAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,yBAAyBC,UAAWN,SCEhDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,+BE3IZ,IAAKxC,EAOAyC,EAPZ,kC,SAAYzC,K,gCAAAA,E,sCAAAA,E,sCAAAA,E,qDAAAA,M,cAOAyC,K,0CAAAA,E,gDAAAA,E,gDAAAA,E,+DAAAA,M","file":"static/js/main.88090f50.chunk.js","sourcesContent":["import { HatClaim } from \"../../hat-claim.interface\";\nimport { ReduxEditHatClaimAction } from \"../actions/hatClaimActions\";\nimport { ReduxActionTypes } from \"../../../../redux/actions/rootActions\";\n\nconst initHatClaim: HatClaim = {\n    password: '',\n    email: '',\n    hatName: '',\n    hatCluster: '',\n    termsAgreed: false,\n    optins: false,\n};\n\ntype UserReducerActionsType = ReduxEditHatClaimAction;\n\nexport default function(\n    state: HatClaim = initHatClaim,\n    action: UserReducerActionsType,\n) {\n    if (action.type === ReduxActionTypes.EDIT_HAT_CLAIM) {\n        return {\n            ...state, [action.name]: action.value\n        };\n    } else {\n        return state;\n    }\n}\n","import { ReduxEditPasswordHatClaimAction } from \"../actions/hatClaimActions\";\nimport { ReduxActionTypes } from \"../../../../redux/actions/rootActions\";\n\nexport interface ReduxHatClaimPasswordState {\n    password: string;\n    passwordConfirm: string;\n    passwordStrength: { score: number };\n    passwordMatch: boolean;\n}\n\nconst initialState: ReduxHatClaimPasswordState = {\n    password: '',\n    passwordConfirm: '',\n    passwordStrength: { score: 0 },\n    passwordMatch: false,\n};\n\ntype HatClaimPasswordReducerActionsType = ReduxEditPasswordHatClaimAction;\n\nexport default function(\n    state: ReduxHatClaimPasswordState = initialState,\n    action: HatClaimPasswordReducerActionsType,\n) {\n    if (action.type === ReduxActionTypes.EDIT_HAT_PASSWORD) {\n        return {\n            ...state,\n            [action.name]: action.value\n        };\n    } else {\n        return state;\n    }\n}\n","import hatClaimReducer  from \"./hatClaimReducer\";\nimport { combineReducers } from \"redux\";\nimport hatClaimPasswordReducer, { ReduxHatClaimPasswordState } from \"./hatClaimPasswordReducer\";\nimport hatClaimCurrentStepReducer  from \"./hatClaimCurrentStepReducer\";\nimport { HatClaim } from \"../../hat-claim.interface\";\nimport hatClaimErrorReducer from \"./hatClaimErrorReducer\";\n\ninterface RootReducerInterface {\n    hatClaim: HatClaim;\n    currentStep: number;\n    password: ReduxHatClaimPasswordState;\n    errorMsg: string;\n}\n\nconst hatClaimCombinedReducer = combineReducers<RootReducerInterface>({\n    hatClaim: hatClaimReducer,\n    currentStep: hatClaimCurrentStepReducer,\n    password: hatClaimPasswordReducer,\n    errorMsg: hatClaimErrorReducer,\n});\n\nexport type HatClaimState = ReturnType<typeof hatClaimCombinedReducer>;\n\nexport default hatClaimCombinedReducer;","import { ReduxEdiCurrentStepHatClaimAction } from \"../actions/hatClaimActions\";\nimport { ReduxActionTypes } from \"../../../../redux/actions/rootActions\";\n\ntype UserReducerActionsType = ReduxEdiCurrentStepHatClaimAction;\n\nexport default function(\n    state: number = 0,\n    action: UserReducerActionsType,\n) {\n    if (action.type === ReduxActionTypes.EDIT_CURRENT_STEP) {\n        return action.step;\n    } else {\n        return state;\n    }\n}\n","import { ReduxEditErrorMsgHatClaimAction } from \"../actions/hatClaimActions\";\nimport { ReduxActionTypes } from \"../../../../redux/actions/rootActions\";\n\ntype UserReducerActionsType = ReduxEditErrorMsgHatClaimAction;\n\nexport default function(\n    state: string = '',\n    action: UserReducerActionsType,\n) {\n    if (action.type === ReduxActionTypes.EDIT_HAT_CLAIM_ERROR_MSG) {\n        return action.message;\n    } else {\n        return state;\n    }\n}\n","import hatClaimCombinedReducer, { HatClaimState } from \"../../components/hat-claim/redux/reducers/hatClaimCombinedReducer\";\nimport { combineReducers } from \"redux\";\n\ninterface RootReducerInterface {\n    hatClaim: HatClaimState\n}\n\nconst rootReducer = combineReducers<RootReducerInterface>({\n    hatClaim: hatClaimCombinedReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;","import React from 'react';\nimport thunk from \"redux-thunk\";\nimport { applyMiddleware, createStore } from \"redux\";\nimport rootReducer from \"../../redux/reducer/rootReducer\";\nimport { Provider } from 'react-redux';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\ntype Props = {\n    children: React.ReactNode\n}\n\nconst Root: React.FC<Props> = props => (\n    <Provider store={store}>\n        {props.children}\n    </Provider>\n);\nexport default Root;\n","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Root from \"./Root\";\nconst HatClaim = React.lazy(() => import('../hat-claim/HatClaim'));\n\nconst App = () => (\n    <Root>\n        <Router>\n            <Suspense fallback={<div>Loading...</div>}>\n                <Switch>\n                    <Route path=\"/hat/claim/:claimToken\" component={HatClaim}/>\n                </Switch>\n            </Suspense>\n        </Router>\n    </Root>\n);\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/styles/main.scss';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export enum ReduxActionTypes {\n    EDIT_HAT_CLAIM = 'EDIT_HAT_CLAIM',\n    EDIT_HAT_PASSWORD = 'EDIT_HAT_PASSWORD',\n    EDIT_CURRENT_STEP = 'EDIT_CURRENT_STEP',\n    EDIT_HAT_CLAIM_ERROR_MSG = 'EDIT_HAT_CLAIM_ERROR_MSG'\n}\n\nexport enum ReduxTestingActionTypes {\n    EDIT_HAT_CLAIM_TEST = 'EDIT_HAT_CLAIM_TEST',\n    EDIT_HAT_PASSWORD_TEST = 'EDIT_HAT_PASSWORD_TEST',\n    EDIT_CURRENT_STEP_TEST = 'EDIT_CURRENT_STEP_TEST',\n    EDIT_HAT_CLAIM_ERROR_MSG_TEST = 'EDIT_HAT_CLAIM_ERROR_MSG_TEST'\n}\n\nexport interface ReduxBaseAction {\n    type: ReduxActionTypes | ReduxTestingActionTypes;\n}\n\n"],"sourceRoot":""}