
# USER Routes
GET           /users/user                                 org.hatdex.hat.api.controllers.Users.listUsers
POST          /users/user                                 org.hatdex.hat.api.controllers.Users.createUser
GET           /publickey                                  org.hatdex.hat.api.controllers.Users.publicKey
GET           /users/access_token/validate                org.hatdex.hat.api.controllers.Users.validateToken
GET           /users/application_token                    org.hatdex.hat.api.controllers.Users.applicationToken(name: String, resource: String)
GET           /users/access_token                         org.hatdex.hat.api.controllers.Users.accessToken
PUT           /users/user/:userId/enable                  org.hatdex.hat.api.controllers.Users.enableUser(userId: java.util.UUID)
PUT           /users/user/:userId/disable                 org.hatdex.hat.api.controllers.Users.disableUser(userId: java.util.UUID)

# DATA Routes
GET           /data/sources                               org.hatdex.hat.api.controllers.Data.getDataSources

POST          /data/table                                 org.hatdex.hat.api.controllers.Data.createTable
POST          /data/table/:parentId/table/:childId        org.hatdex.hat.api.controllers.Data.linkTables(parentId: Int, childId: Int)
GET           /data/table/:tableId                        org.hatdex.hat.api.controllers.Data.getTable(tableId: Int)
GET           /data/table                                 org.hatdex.hat.api.controllers.Data.findTable(name: Option[String], nameLike: Option[String], nameUnlike: Option[String], source: String)
GET           /data/table/:tableId/values                 org.hatdex.hat.api.controllers.Data.getTableValues(tableId: Int, limit: Option[Int], startTime: Option[Long], endTime: Option[Long], pretty: Option[Boolean])

POST          /data/field                                 org.hatdex.hat.api.controllers.Data.createField
GET           /data/field/:fieldId                        org.hatdex.hat.api.controllers.Data.getField(fieldId: Int)
GET           /data/field/:fieldId/values                 org.hatdex.hat.api.controllers.Data.getFieldValues(fieldId: Int)

POST          /data/record                                org.hatdex.hat.api.controllers.Data.createRecord
POST          /data/record/values                         org.hatdex.hat.api.controllers.Data.createRecordValues
GET           /data/record/:recordId/values               org.hatdex.hat.api.controllers.Data.getRecordValues(recordId: Int)
POST          /data/record/:recordId/values               org.hatdex.hat.api.controllers.Data.storeValueList(recordId: Int)

POST          /data/value                                 org.hatdex.hat.api.controllers.Data.createValue

DELETE        /data/value/:valueId                        org.hatdex.hat.api.controllers.Data.deleteDataValue(valueId: Int)
DELETE        /data/field/:fieldId                        org.hatdex.hat.api.controllers.Data.deleteDataField(fieldId: Int)
DELETE        /data/table/:tableId                        org.hatdex.hat.api.controllers.Data.deleteDataTable(tableId: Int)
DELETE        /data/record/:recordId                      org.hatdex.hat.api.controllers.Data.deleteDataRecord(recordId: Int)

# DATA DEBIT routes

GET           /dataDebit                                  org.hatdex.hat.api.controllers.DataDebit.listDataDebits()
POST          /dataDebit/propose                          org.hatdex.hat.api.controllers.DataDebit.proposeDataDebit
GET           /dataDebit/:dataDebitKey                    org.hatdex.hat.api.controllers.DataDebit.getDataDebit(dataDebitKey: java.util.UUID)
GET           /dataDebit/:dataDebitKey/enable             org.hatdex.hat.api.controllers.DataDebit.enableDataDebit(dataDebitKey: java.util.UUID)
GET           /dataDebit/:dataDebitKey/disable            org.hatdex.hat.api.controllers.DataDebit.disableDataDebit(dataDebitKey: java.util.UUID)
GET           /dataDebit/:dataDebitKey/values             org.hatdex.hat.api.controllers.DataDebit.retrieveDataDebitValues(dataDebitKey: java.util.UUID, limit: Option[Int], startTime: Option[Long], endTime: Option[Long], pretty: Option[Boolean])

# SYSTEM routes
GET           /system/update                              org.hatdex.hat.api.controllers.Updates.update()

# PHATA routes
GET           /assets/*file                               @controllers.Assets.versioned(path="/public", file: Asset)
GET           /                                           org.hatdex.hat.phata.controllers.Phata.home
GET           /launcher                                   org.hatdex.hat.phata.controllers.Phata.launcher
GET           /profile                                    org.hatdex.hat.phata.controllers.Phata.profile
GET           /notables                                   org.hatdex.hat.phata.controllers.Phata.notables(id: Option[Int])
GET           /hat                                        org.hatdex.hat.phata.controllers.Phata.profile

POST          /                                           org.hatdex.hat.phata.controllers.Authentication.login
GET           /signin                                     org.hatdex.hat.phata.controllers.Authentication.signin
GET           /hatlogin                                   org.hatdex.hat.phata.controllers.Authentication.hatLogin(name: String, redirect: String)
GET           /logout                                     org.hatdex.hat.phata.controllers.Authentication.logout
GET           /password                                   org.hatdex.hat.phata.controllers.Authentication.passwordChangeStart
POST          /password                                   org.hatdex.hat.phata.controllers.Authentication.passwordChangeProcess
GET           /passwordreset                              org.hatdex.hat.phata.controllers.Authentication.passwordResetStart
POST          /passwordreset                              org.hatdex.hat.phata.controllers.Authentication.passwordResetProcess
GET           /passwordreset/confirm                      org.hatdex.hat.phata.controllers.Authentication.passwordResetConfirmStart
POST          /passwordreset/confirm                      org.hatdex.hat.phata.controllers.Authentication.passwordResetConfirmProcess