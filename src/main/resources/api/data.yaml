swagger: '2.0'
info:
  version: 2.0.0
  title: HAT 2.0 API
  license:
    name: Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International
    url: 'http://creativecommons.org/licenses/by-nc-nd/4.0/'
  contact:
    name: Hub-of-All-Things Project
    url: 'http://hubofallthings.com'
host: api.hubofallthings.com
schemes:
  - http
securityDefinitions:
  access_token:
    type: apiKey
    name: access_token
    in: header
basePath: /data
consumes:
  - application/json
produces:
  - application/json
security:
  - access_token: []
paths:
  /table:
    post:
      description: |
        Creates a new virtual table for storing arbitrary incoming data
      parameters:
        - name: Table
          in: body
          description: Table information to be inserted
          required: true
          schema:
            $ref: '#/definitions/Table'
      tags:
        - Tables
        - Setup
      responses:
        '201':
          description: Table has been created
          schema:
            $ref: '#/definitions/TableResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/table/{tableId}/addTable/{subtableId}':
    post:
      description: >
        Marks provided table as a "child" of another, e.g. to created nested data
        structured
      parameters:
        - name: tableId
          in: path
          description: the table to which another table is to be added
          required: true
          type: number
          format: integer
        - name: subtableId
          in: path
          description: the sub-table ID
          required: true
          type: number
          format: integer
        - name: RelationshipType
          in: body
          required: true
          schema:
            $ref: '#/definitions/Relationship'
      tags:
        - Tables
        - Setup
      responses:
        '201':
          description: Tables have been linked. Returns ID of the crossreference
          schema:
            $ref: '#/definitions/EntityCreated'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/table/{tableId}':
    get:
      description: |
        Retrieves table information by Table ID
      parameters:
        - name: tableId
          in: path
          description: table ID
          required: true
          type: number
          format: integer
      tags:
        - Tables
      responses:
        '200':
          description: Table has been found. Returns table information
          schema:
            $ref: '#/definitions/TableStructure'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/table/{tableId}/values':
    get:
      description: |
        Retrieves all data associated with the table, including sub-tables
        recursively
      parameters:
        - name: tableId
          in: path
          description: table ID
          required: true
          type: number
          format: integer
      tags:
        - Tables
        - Data
      responses:
        '200':
          description: 'A table with data filled, each record as a data array element'
          schema:
            type: array
            items:
              $ref: '#/definitions/TableValues'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /field:
    post:
      description: |
        Create a new field in a virtual table
      parameters:
        - name: Field
          in: body
          description: Information about the field to be inserted
          required: true
          schema:
            $ref: '#/definitions/Field'
      tags:
        - Fields
        - Setup
      responses:
        '201':
          description: Field has been created
          schema:
            $ref: '#/definitions/FieldResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/field/{fieldId}':
    get:
      description: |
        Retrieves Field information by Table ID
      parameters:
        - name: fieldId
          in: path
          description: field ID
          required: true
          type: number
          format: integer
      tags:
        - Fields
      responses:
        '200':
          description: Field has been found. Returns field information
          schema:
            $ref: '#/definitions/FieldResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/field/{fieldId}/values':
    get:
      description: |
        Retrieves all data associated with the specific field
      parameters:
        - name: fieldId
          in: path
          description: field ID
          required: true
          type: number
          format: integer
      tags:
        - Fields
        - Data
      responses:
        '200':
          description: A list of values.
          schema:
            $ref: '#/definitions/FieldValues'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /record:
    post:
      description: |
        Create a new record to connect data values together
      parameters:
        - name: Record
          in: body
          description: Record information -- only name should be set
          required: true
          schema:
            $ref: '#/definitions/Record'
      tags:
        - Records
        - Setup
      responses:
        '201':
          description: Record has been created
          schema:
            $ref: '#/definitions/RecordResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/record/{recordId}':
    get:
      description: |
        Retrieves Record information by Record ID
      parameters:
        - name: recordId
          in: path
          description: record ID
          required: true
          type: number
          format: integer
      tags:
        - Records
      responses:
        '200':
          description: Record has been found. Returns record information
          schema:
            $ref: '#/definitions/RecordResponse'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/record/{recordId}/values':
    get:
      description: |
        Retrieves all data associated with the specific record ID
      parameters:
        - name: recordId
          in: path
          description: record ID
          required: true
          type: number
          format: integer
      tags:
        - Records
        - Data
      responses:
        '200':
          description: A record with data filled
          schema:
            $ref: '#/definitions/RecordValues'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /value:
    post:
      description: |
        Store a new data value, associated with a database field and a record
      parameters:
        - name: Value
          in: body
          description: Information about a single value to be inserted in the database
          required: true
          schema:
            $ref: '#/definitions/Value'
      tags:
        - Values
      responses:
        '201':
          description: Data Value has been saved
          schema:
            $ref: '#/definitions/Value'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  '/value/{valueId}':
    post:
      description: |
        Store a new data value, associated with a database field and a record
      parameters:
        - name: valueId
          in: path
          description: value ID
          required: true
          type: number
          format: integer
      tags:
        - Values
      responses:
        '200':
          description: Value has been found. Returns value data
          schema:
            $ref: '#/definitions/Value'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /value/list:
    post:
      description: >
        Store a list of values, all with its own information of what it is
        associated with
      parameters:
        - name: Value
          in: body
          description: Information about a single value to be inserted in the database
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/Value'
      tags:
        - Values
      responses:
        '201':
          description: Data Value has been saved
          schema:
            type: array
            items:
              $ref: '#/definitions/Value'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
definitions:
  TimeStructure:
    properties:
      dateCreated:
        type: string
        format: date-time
        description: Time the entity was created
        example: '2015-08-16T21:45:22.551Z'
      lastUpdated:
        type: string
        format: date-time
        description: Time the entity was last updated
        example: '2015-08-16T21:45:22.551Z'
    required:
      - dateCreated
      - lastUpdated
  Table:
    required:
      - name
      - source
    properties:
      id:
        type: number
        format: int32
        description: Unique Table ID
        example: 1
      name:
        type: string
        description: Name of the table
        example: Location
      source:
        type: string
        description: Name of the source
        example: Facebook
  TableResponse:
    description: Table response object
    allOf:
      - $ref: '#/definitions/Table'
      - $ref: '#/definitions/TimeStructure'
  TableStructure:
    description: Data Table information with structure - related fields and sub-tables
    allOf:
      - $ref: '#/definitions/TableResponse'
      - properties:
          fields:
            type: array
            description: Array of fields (columns) in the table
            items:
              $ref: '#/definitions/Field'
          subTables:
            type: array
            description: 'Array of sub-tables (recursive type) in the table, used to represent complex types, nested objects, etc.'
            items:
              $ref: '#/definitions/TableStructure'
  TableValues:
    description: Data Table information with structure and values filled in - related fields and sub-tables
    allOf:
      - $ref: '#/definitions/TableStructure'
      - properties:
          fields:
            type: array
            description: Array of fields (columns) in the table
            items:
              $ref: '#/definitions/FieldValues'
  Record:
    required:
      - name
    properties:
      id:
        type: number
        description: 'Unique data record ID, connecting tables and records in a single received record'
      name:
        type: string
        description: Name of the record
  RecordResponse:
    required:
      - name
    allOf:
      - $ref: '#/definitions/Record'
      - $ref: '#/definitions/TimeStructure'
  RecordValues:
    allOf:
      - $ref: '#/definitions/RecordResponse'
      - properties:
          tables:
            type: array
            description: "Array of tables that contain the record's values. Only set for outbound API calls"
            items:
              $ref: '#/definitions/TableValues'
  Field:
    required:
      - tableId
      - name
    properties:
      id:
        type: number
        description: Unique Field ID
      tableId:
        type: number
        description: ID of the table the field is part of
      name:
        type: string
        description: name of the field (column name in the database)
  FieldResponse:
    allOf:
      - $ref: '#/definitions/Field'
      - $ref: '#/definitions/TimeStructure'
  FieldValues:
    allOf:
      - $ref: '#/definitions/FieldResponse'
      - properties:
          values:
            type: array
            description: Array of values associated with the field. Only set for outbound API calls
            items:
              $ref: '#/definitions/Value'
  Value:
    required:
      - value
      - fieldId
      - recordId
    allOf:
      - properties:
          id:
            type: number
            description: Unique data value ID
          value:
            type: string
            description: An arbitrary data value to be stored
          fieldId:
            type: number
            description: Which field (column) the value is in
          recordId:
            type: number
            description: ID of the record the value is part of
      - $ref: '#/definitions/TimeStructure'
  Relationship:
    description: 'The type of the relationship between two tables. Currently only relationship type "owns" is supported.'
    properties:
      relationshipType:
        type: string
        description: 'The type of relationship between two entities (e.g. one entity "owns" another)'
        example: owns
  EntityCreated:
    properties:
      id:
        type: number
        description: ID of the created entity
  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
